server.port=8081
spring.main.datasource.driver-class-name=org.postgresql.Driver
spring.main.datasource.url = jdbc:postgresql://localhost:5432/order_management
spring.main.datasource.username = postgres
spring.main.datasource.password = admin
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto = update
spring.jpa.show-sql=true
spring.batch.job.enabled=false
spring.batch.jdbc.initialize-schema: always
spring.datasource.sql-script-encoding=UTF-8
spring.profiles.active=

spring.second.datasource.url = jdbc:postgresql://localhost:5432/demo
spring.second.datasource.username = postgres
spring.second.datasource.password = admin
spring.second.datasource.driverClassName = org.postgresql.Driver
#jwt
app.jwtSecret= JWTSuperSecretKey
app.jwtExpirationInMs = 172800000

spring.mvc.pathmatch.matching-strategy = ANT_PATH_MATCHER

spring.application.name = orderManagement




spring.mail.host=127.0.0.1
spring.mail.port=25
spring.mail.username=apikey
spring.mail.password=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
# 
## Other properties
spring.mail.properties.mail.debug=true
spring.mail.properties.mail.transport.protocol=smtp
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000
# 
## TLS , port 587
spring.mail.properties.mail.smtp.starttls.enable=true
# 
## SSL, post 465
#spring.mail.properties.mail.smtp.socketFactory.port = 465
#spring.mail.properties.mail.smtp.socketFactory.class = javax.net.ssl.SSLSocketFactory


#spring.mail.host=smtp-mail.outlook.com
#spring.mail.port=587
#spring.mail.username=seppa@evoketechnologies.com
#spring.mail.password=Kishore@123
# 
#spring.mail.properties.mail.protocol=smtp
#spring.mail.properties.mail.tls=true
# 
#spring.mail.properties.mail.smtp.auth=true
#spring.mail.properties.mail.smtp.starttls.enable=true
#spring.mail.properties.mail.smtp.ssl.trust=smtp-mail.outlook.com


#resilience4j.circuitbreaker.instances.myProjectAllRemoteCallsCB
#      registerHealthIndicator: true
#      slidingWindowSize: 10
#      slidingWindowType: COUNT_BASED
#      permittedNumberOfCallsInHalfOpenState: 4
#      minimumNumberOfCalls: 10
#      waitDurationInOpenState: 5s
#      slowCallRateThreshold: 50
#      slowCallDurationThreshold: 10
#      failureRateThreshold: 50

resilience4j.circuitbreaker.instances.myProjectAllRemoteCallsCB.register-health-indicator=true
resilience4j.circuitbreaker.instances.myProjectAllRemoteCallsCB.sliding-window-size=10
resilience4j.circuitbreaker.instances.myProjectAllRemoteCallsCB.sliding-window-type=count-based
resilience4j.circuitbreaker.instances.myProjectAllRemoteCallsCB.permitted-number-of-calls-in-half-open-state=3
resilience4j.circuitbreaker.instances.myProjectAllRemoteCallsCB.minimum-number-of-calls=5
resilience4j.circuitbreaker.instances.myProjectAllRemoteCallsCB.wait-duration-in-open-state=5s
#resilience4j.circuitbreaker.instances.myProjectAllRemoteCallsCB.slow-call-duration-threshold=50
#resilience4j.circuitbreaker.instances.myProjectAllRemoteCallsCB.slow-call-rate-threshold=10
resilience4j.circuitbreaker.instances.myProjectAllRemoteCallsCB.failure-rate-threshold=50
#resilience4j.circuitbreaker.instances.myProjectAllRemoteCallsCB.event-consumer-buffer-size=10
#resilience4j.circuitbreaker.instances.myProjectAllRemoteCallsCB.automatic-transition-from-open-to-half-open-enabled=true

management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=always 





spring.cache.jcache.config=ehcache.xml
logging.level.root=info
logging.level.com.orderManagement=Trace
logging.file.path=target/initial.log
logging.file.name=orderManagement.log
logging.pattern.rolling-file-name=orderManagement-%d{yyyy-MM-dd}.%i.log


spring.jpa.properties.hibernate.envers.autoRegisterListeners=true
